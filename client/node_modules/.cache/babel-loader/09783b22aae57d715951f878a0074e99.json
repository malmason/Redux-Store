{"ast":null,"code":"import _toConsumableArray from\"C:/Users/malma/UCONN/Redux-Store/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"C:/Users/malma/UCONN/Redux-Store/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{useReducer}from'react';import{UPDATE_PRODUCTS,ADD_TO_CART,UPDATE_CART_QUANTITY,REMOVE_FROM_CART,ADD_MULTIPLE_TO_CART,UPDATE_CATEGORIES,UPDATE_CURRENT_CATEGORY,CLEAR_CART,TOGGLE_CART}from'./actions';var initialState={products:[],cart:[],cartOpen:false,categories:[],currentCategory:''};// The reducer is a function that accepts the current state and an action. It returns a new state based on that action.\nexport var reducer=function reducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){// Returns a copy of state with an update products array. We use the action.products property and spread it's contents into the new array.\ncase UPDATE_PRODUCTS:return _objectSpread(_objectSpread({},state),{},{products:_toConsumableArray(action.products)});case ADD_TO_CART:return _objectSpread(_objectSpread({},state),{},{cartOpen:true,cart:[].concat(_toConsumableArray(state.cart),[action.product])});case ADD_MULTIPLE_TO_CART:return _objectSpread(_objectSpread({},state),{},{cart:[].concat(_toConsumableArray(state.cart),_toConsumableArray(action.products))});// Returns a copy of state, sets the cartOpen to true and maps through the items in the cart.\n// If the item's `id` matches the `id` that was provided in the action.payload, we update the purchase quantity.\ncase UPDATE_CART_QUANTITY:return _objectSpread(_objectSpread({},state),{},{cartOpen:true,cart:state.cart.map(function(product){if(action._id===product._id){product.purchaseQuantity=action.purchaseQuantity;}return product;})});// First we iterate through each item in the cart and check to see if the `product._id` matches the `action._id`\n// If so, we remove it from our cart and set the updated state to a variable called `newState`\ncase REMOVE_FROM_CART:var newState=state.cart.filter(function(product){return product._id!==action._id;});// Then we return a copy of state and check to see if the cart is empty.\n// If not, we set the cartOpen status to  `true`. Then we return an updated cart array set to the value of `newState`.\nreturn _objectSpread(_objectSpread({},state),{},{cartOpen:newState.length>0,cart:newState});case CLEAR_CART:return _objectSpread(_objectSpread({},state),{},{cartOpen:false,cart:[]});case TOGGLE_CART:return _objectSpread(_objectSpread({},state),{},{cartOpen:!state.cartOpen});case UPDATE_CATEGORIES:return _objectSpread(_objectSpread({},state),{},{categories:_toConsumableArray(action.categories)});case UPDATE_CURRENT_CATEGORY:return _objectSpread(_objectSpread({},state),{},{currentCategory:action.currentCategory});// Return the state as is in the event that the `action.type` passed to our reducer was not accounted for by the developers\n// This saves us from a crash.\ndefault:return state;}};export default function useProductReducer(initialState){return useReducer(reducer,initialState);}","map":{"version":3,"sources":["C:/Users/malma/UCONN/Redux-Store/client/src/utils/reducers.js"],"names":["useReducer","UPDATE_PRODUCTS","ADD_TO_CART","UPDATE_CART_QUANTITY","REMOVE_FROM_CART","ADD_MULTIPLE_TO_CART","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","CLEAR_CART","TOGGLE_CART","initialState","products","cart","cartOpen","categories","currentCategory","reducer","state","action","type","product","map","_id","purchaseQuantity","newState","filter","length","useProductReducer"],"mappings":"mUAAA,OAASA,UAAT,KAA2B,OAA3B,CACA,OACEC,eADF,CAEEC,WAFF,CAGEC,oBAHF,CAIEC,gBAJF,CAKEC,oBALF,CAMEC,iBANF,CAOEC,uBAPF,CAQEC,UARF,CASEC,WATF,KAUO,WAVP,CAYA,GAAMC,CAAAA,YAAY,CAAG,CACnBC,QAAQ,CAAE,EADS,CAEnBC,IAAI,CAAE,EAFa,CAGnBC,QAAQ,CAAE,KAHS,CAInBC,UAAU,CAAE,EAJO,CAKnBC,eAAe,CAAE,EALE,CAArB,CASA;AACA,MAAO,IAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAkC,IAAjCC,CAAAA,KAAiC,2DAAzBP,YAAyB,IAAXQ,CAAAA,MAAW,2CACvD,OAAQA,MAAM,CAACC,IAAf,EACE;AACA,IAAKlB,CAAAA,eAAL,CACE,sCACKgB,KADL,MAEEN,QAAQ,oBAAMO,MAAM,CAACP,QAAb,CAFV,GAKF,IAAKT,CAAAA,WAAL,CACE,sCACKe,KADL,MAEEJ,QAAQ,CAAE,IAFZ,CAGED,IAAI,8BAAMK,KAAK,CAACL,IAAZ,GAAkBM,MAAM,CAACE,OAAzB,EAHN,GAKF,IAAKf,CAAAA,oBAAL,CACE,sCACKY,KADL,MAEEL,IAAI,8BAAMK,KAAK,CAACL,IAAZ,qBAAqBM,MAAM,CAACP,QAA5B,EAFN,GAIF;AACA;AACA,IAAKR,CAAAA,oBAAL,CACE,sCACKc,KADL,MAEEJ,QAAQ,CAAE,IAFZ,CAGED,IAAI,CAAEK,KAAK,CAACL,IAAN,CAAWS,GAAX,CAAe,SAACD,OAAD,CAAa,CAChC,GAAIF,MAAM,CAACI,GAAP,GAAeF,OAAO,CAACE,GAA3B,CAAgC,CAC9BF,OAAO,CAACG,gBAAR,CAA2BL,MAAM,CAACK,gBAAlC,CACD,CACD,MAAOH,CAAAA,OAAP,CACD,CALK,CAHR,GAWF;AACA;AACA,IAAKhB,CAAAA,gBAAL,CACE,GAAIoB,CAAAA,QAAQ,CAAGP,KAAK,CAACL,IAAN,CAAWa,MAAX,CAAkB,SAACL,OAAD,CAAa,CAC5C,MAAOA,CAAAA,OAAO,CAACE,GAAR,GAAgBJ,MAAM,CAACI,GAA9B,CACD,CAFc,CAAf,CAIA;AACA;AACA,sCACKL,KADL,MAEEJ,QAAQ,CAAEW,QAAQ,CAACE,MAAT,CAAkB,CAF9B,CAGEd,IAAI,CAAEY,QAHR,GAMF,IAAKhB,CAAAA,UAAL,CACE,sCACKS,KADL,MAEEJ,QAAQ,CAAE,KAFZ,CAGED,IAAI,CAAE,EAHR,GAMF,IAAKH,CAAAA,WAAL,CACE,sCACKQ,KADL,MAEEJ,QAAQ,CAAE,CAACI,KAAK,CAACJ,QAFnB,GAKF,IAAKP,CAAAA,iBAAL,CACE,sCACKW,KADL,MAEEH,UAAU,oBAAMI,MAAM,CAACJ,UAAb,CAFZ,GAKF,IAAKP,CAAAA,uBAAL,CACE,sCACKU,KADL,MAEEF,eAAe,CAAEG,MAAM,CAACH,eAF1B,GAKF;AACA;AACA,QACE,MAAOE,CAAAA,KAAP,CA5EJ,CA8ED,CA/EM,CAiFP,cAAe,SAASU,CAAAA,iBAAT,CAA2BjB,YAA3B,CAAyC,CACtD,MAAOV,CAAAA,UAAU,CAACgB,OAAD,CAAUN,YAAV,CAAjB,CACD","sourcesContent":["import { useReducer } from 'react';\r\nimport {\r\n  UPDATE_PRODUCTS,\r\n  ADD_TO_CART,\r\n  UPDATE_CART_QUANTITY,\r\n  REMOVE_FROM_CART,\r\n  ADD_MULTIPLE_TO_CART,\r\n  UPDATE_CATEGORIES,\r\n  UPDATE_CURRENT_CATEGORY,\r\n  CLEAR_CART,\r\n  TOGGLE_CART,\r\n} from './actions';\r\n\r\nconst initialState = {\r\n  products: [],\r\n  cart: [],\r\n  cartOpen: false,\r\n  categories: [],\r\n  currentCategory: '',\r\n};\r\n\r\n\r\n// The reducer is a function that accepts the current state and an action. It returns a new state based on that action.\r\nexport const reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    // Returns a copy of state with an update products array. We use the action.products property and spread it's contents into the new array.\r\n    case UPDATE_PRODUCTS:\r\n      return {\r\n        ...state,\r\n        products: [...action.products],\r\n      };\r\n\r\n    case ADD_TO_CART:\r\n      return {\r\n        ...state,\r\n        cartOpen: true,\r\n        cart: [...state.cart, action.product],\r\n      };\r\n    case ADD_MULTIPLE_TO_CART:\r\n      return {\r\n        ...state,\r\n        cart: [...state.cart, ...action.products],\r\n      };\r\n    // Returns a copy of state, sets the cartOpen to true and maps through the items in the cart.\r\n    // If the item's `id` matches the `id` that was provided in the action.payload, we update the purchase quantity.\r\n    case UPDATE_CART_QUANTITY:\r\n      return {\r\n        ...state,\r\n        cartOpen: true,\r\n        cart: state.cart.map((product) => {\r\n          if (action._id === product._id) {\r\n            product.purchaseQuantity = action.purchaseQuantity;\r\n          }\r\n          return product;\r\n        }),\r\n      };\r\n\r\n    // First we iterate through each item in the cart and check to see if the `product._id` matches the `action._id`\r\n    // If so, we remove it from our cart and set the updated state to a variable called `newState`\r\n    case REMOVE_FROM_CART:\r\n      let newState = state.cart.filter((product) => {\r\n        return product._id !== action._id;\r\n      });\r\n\r\n      // Then we return a copy of state and check to see if the cart is empty.\r\n      // If not, we set the cartOpen status to  `true`. Then we return an updated cart array set to the value of `newState`.\r\n      return {\r\n        ...state,\r\n        cartOpen: newState.length > 0,\r\n        cart: newState,\r\n      };\r\n\r\n    case CLEAR_CART:\r\n      return {\r\n        ...state,\r\n        cartOpen: false,\r\n        cart: [],\r\n      };\r\n\r\n    case TOGGLE_CART:\r\n      return {\r\n        ...state,\r\n        cartOpen: !state.cartOpen,\r\n      };\r\n\r\n    case UPDATE_CATEGORIES:\r\n      return {\r\n        ...state,\r\n        categories: [...action.categories],\r\n      };\r\n\r\n    case UPDATE_CURRENT_CATEGORY:\r\n      return {\r\n        ...state,\r\n        currentCategory: action.currentCategory,\r\n      };\r\n\r\n    // Return the state as is in the event that the `action.type` passed to our reducer was not accounted for by the developers\r\n    // This saves us from a crash.\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default function useProductReducer(initialState) {\r\n  return useReducer(reducer, initialState);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}